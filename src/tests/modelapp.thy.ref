[Processing ./modelapp.thy]
module type A =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x 
         
         assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z 
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x 
   *)
    
   val c : a
   (**   assertion c_support :  c : ||a|| 
   *)
    
   module E : sig
                type e
                 
                (** predicate (=e=) : e -> e -> bool *)
                (**   assertion symmetric_e : 
                       forall x:e, y:e,  x =e= y -> y =e= x 
                      
                      assertion transitive_e : 
                       forall x:e, y:e, z:e,  x =e= y /\ y =e= z -> x =e= z 
                *)
                 
                (** predicate ||e|| : e -> bool *)
                (**   assertion support_def_e : 
                       forall x:e,  x : ||e|| <-> x =e= x 
                *)
                 
                type f = e
                 
                (** predicate ||f|| : f -> bool *)
                (**   assertion f_def_support : 
                       forall x:f,  x : ||f|| <-> x : ||e|| 
                *)
                 
                (** predicate (=f=) : f -> f -> bool *)
                (**   assertion f_def_per : 
                       forall x:f, y:f,  x =f= y <-> x =e= y 
                *)
              end
 end
 
module type B =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x 
         
         assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z 
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x 
   *)
    
   type b = a
    
   (** predicate ||b|| : b -> bool *)
   (**   assertion b_def_support :  forall x:b,  x : ||b|| <-> x : ||a|| 
   *)
    
   (** predicate (=b=) : b -> b -> bool *)
   (**   assertion b_def_per :  forall x:b, y:b,  x =b= y <-> x =a= y 
   *)
    
   type b'
    
   (** predicate (=b'=) : b' -> b' -> bool *)
   (**   assertion symmetric_b' :  forall x:b', y:b',  x =b'= y -> y =b'= x 
         
         assertion transitive_b' : 
          forall x:b', y:b', z:b',  x =b'= y /\ y =b'= z -> x =b'= z 
   *)
    
   (** predicate ||b'|| : b' -> bool *)
   (**   assertion support_def_b' :  forall x:b',  x : ||b'|| <-> x =b'= x 
   *)
    
   val c : a
   (**   assertion c_support :  c : ||a|| 
   *)
    
   val d : b
   (**   assertion d_support :  d : ||b|| 
   *)
    
   module E : sig
                type e = a
                 
                (** predicate ||e|| : e -> bool *)
                (**   assertion e_def_support : 
                       forall x:e,  x : ||e|| <-> x : ||a|| 
                *)
                 
                (** predicate (=e=) : e -> e -> bool *)
                (**   assertion e_def_per : 
                       forall x:e, y:e,  x =e= y <-> x =a= y 
                *)
                 
                type f = b
                 
                (** predicate ||f|| : f -> bool *)
                (**   assertion f_def_support : 
                       forall x:f,  x : ||f|| <-> x : ||b|| 
                *)
                 
                (** predicate (=f=) : f -> f -> bool *)
                (**   assertion f_def_per : 
                       forall x:f, y:f,  x =f= y <-> x =b= y 
                *)
              end
 end
 
module type C =
 sig
   module BB : B
    
   module FF : functor (X : A) ->
               A
    
   type a = FF(BB).a
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion a_def_support : 
          forall x:a,  x : ||a|| <-> x : ||FF(BB).a|| 
   *)
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion a_def_per :  forall x:a, y:a,  x =a= y <-> x =FF(BB).a= y 
   *)
 end

