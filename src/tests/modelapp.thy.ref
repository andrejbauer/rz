[Processing modelapp.thy]
module type A =
 sig
   type a
   (**  Assertion per_a = 
          (forall x:a, y:a, z:a,  y =a= z /\ x =a= y -> x =a= z)
   *)
    
   val c : a
   (**  Assertion c_total =  c : ||a||
   *)
    
   module E : sig
                type e
                (**  Assertion per_e = 
                       (forall x:e, y:e, z:e,  y =e= z /\ x =e= y -> x =e= z)
                *)
                 
                type f = e
                (**  Assertion f_def_total = 
                       forall x:e,  x : ||f|| <-> x : ||e||
                      
                     Assertion f_def_per = 
                       forall x:e, y:e,  x =f= y <-> x =e= y
                *)
              end
 end
 
module type B =
 sig
   type a
   (**  Assertion per_a = 
          (forall x:a, y:a, z:a,  y =a= z /\ x =a= y -> x =a= z)
   *)
    
   type b = a
   (**  Assertion b_def_total =  forall x:a,  x : ||b|| <-> x : ||a||
         
        Assertion b_def_per =  forall x:a, y:a,  x =b= y <-> x =a= y
   *)
    
   type b'
   (**  Assertion per_b' = 
          (forall x:b', y:b', z:b',  y =b'= z /\ x =b'= y -> x =b'= z)
   *)
    
   val c : a
   (**  Assertion c_total =  c : ||a||
   *)
    
   val d : a
   (**  Assertion d_total =  d : ||b||
   *)
    
   module E : sig
                type e = a
                (**  Assertion e_def_total = 
                       forall x:a,  x : ||e|| <-> x : ||a||
                      
                     Assertion e_def_per = 
                       forall x:a, y:a,  x =e= y <-> x =a= y
                *)
                 
                type f = a
                (**  Assertion f_def_total = 
                       forall x:a,  x : ||f|| <-> x : ||b||
                      
                     Assertion f_def_per = 
                       forall x:a, y:a,  x =f= y <-> x =b= y
                *)
              end
 end
 
module type C =
 sig
   module BB : B
    
   module FF : functor (X : A) ->
               A
    
   type a = FF(BB).a
   (**  Assertion a_def_total = 
          forall x:FF(BB).a,  x : ||a|| <-> x : ||FF(BB).a||
         
        Assertion a_def_per = 
          forall x:FF(BB).a, y:FF(BB).a,  x =a= y <-> x =FF(BB).a= y
   *)
 end

