[Processing ./modelapp.thy]
module type A =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a [Definitional] = 
          forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a [Definitional] = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
    
   val c : a
   (**  Assertion c_support =  c : ||a||
   *)
    
   module E : sig
                type e
                 
                (** predicate (=e=) : e -> e -> bool *)
                (**  Assertion symmetric_e [Definitional] = 
                       forall x:e, y:e,  x =e= y -> y =e= x
                      
                     Assertion transitive_e [Definitional] = 
                       forall x:e, y:e, z:e,  x =e= y /\ y =e= z -> x =e= z
                *)
                 
                type f = e
                (**  Assertion f_def_support = 
                       forall x:f,  x : ||f|| <-> x : ||e||
                      
                     Assertion f_def_per = 
                       forall x:f, y:f,  x =f= y <-> x =e= y
                *)
              end
 end
 
module type B =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a [Definitional] = 
          forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a [Definitional] = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
    
   type b = a
   (**  Assertion b_def_support =  forall x:b,  x : ||b|| <-> x : ||a||
         
        Assertion b_def_per =  forall x:b, y:b,  x =b= y <-> x =a= y
   *)
    
   type b'
    
   (** predicate (=b'=) : b' -> b' -> bool *)
   (**  Assertion symmetric_b' [Definitional] = 
          forall x:b', y:b',  x =b'= y -> y =b'= x
         
        Assertion transitive_b' [Definitional] = 
          forall x:b', y:b', z:b',  x =b'= y /\ y =b'= z -> x =b'= z
   *)
    
   val c : a
   (**  Assertion c_support =  c : ||a||
   *)
    
   val d : b
   (**  Assertion d_support =  d : ||b||
   *)
    
   module E : sig
                type e = a
                (**  Assertion e_def_support = 
                       forall x:e,  x : ||e|| <-> x : ||a||
                      
                     Assertion e_def_per = 
                       forall x:e, y:e,  x =e= y <-> x =a= y
                *)
                 
                type f = b
                (**  Assertion f_def_support = 
                       forall x:f,  x : ||f|| <-> x : ||b||
                      
                     Assertion f_def_per = 
                       forall x:f, y:f,  x =f= y <-> x =b= y
                *)
              end
 end
 
module type C =
 sig
   module BB : B
    
   module FF : functor (X : A) ->
               A
    
   type a = FF(BB).a
   (**  Assertion a_def_support = 
          forall x:a,  x : ||a|| <-> x : ||FF(BB).a||
         
        Assertion a_def_per =  forall x:a, y:a,  x =a= y <-> x =FF(BB).a= y
   *)
 end

