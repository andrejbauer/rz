[Processing ./hotheory.thy]
module type T =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a [Definitional] = 
          forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a [Definitional] = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
 end
 
module type F = functor (M : T) ->
                sig
                  
                end
 
module type G = functor (M : T) ->
                sig
                  
                end
 
module type H =
 functor (M : T) ->
 sig
   val x : M.a
   (**  Assertion x_support =  x : ||M.a||
   *)
 end
 
module M0 : T
 
module G0 : G
 
module H0 : H
 
module type PSI = functor (X : G) ->
                  sig
                    
                  end
 
module type RHO = functor (X : H) ->
                  sig
                    
                  end
 
module type PHI = functor (X : G) ->
                  sig
                    
                  end
 
module Q : sig
             
           end
 
module R : sig
             
           end
 
module W : sig
             
           end

