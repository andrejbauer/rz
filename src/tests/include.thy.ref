[Processing ./include.thy]
module type A =
 sig
   type a
    
   (**{v predicate (=a=) : a -> a -> bool v}*)
   (**  {v assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x v}
         
        {v assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z v}
   *)
    
   (**{v predicate ||a|| : a -> bool v}*)
   (**  {v assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x v}
   *)
 end
 
module type B =
 sig
   type a
    
   (**{v predicate (=a=) : a -> a -> bool v}*)
   (**  {v assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x v}
         
        {v assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z v}
   *)
    
   (**{v predicate ||a|| : a -> bool v}*)
   (**  {v assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x v}
   *)
    
   type b
    
   (**{v predicate (=b=) : b -> b -> bool v}*)
   (**  {v assertion symmetric_b :  forall x:b, y:b,  x =b= y -> y =b= x v}
         
        {v assertion transitive_b : 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z v}
   *)
    
   (**{v predicate ||b|| : b -> bool v}*)
   (**  {v assertion support_def_b :  forall x:b,  x : ||b|| <-> x =b= x v}
   *)
 end
 
module type C =
 sig
   type a
    
   (**{v predicate (=a=) : a -> a -> bool v}*)
   (**  {v assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x v}
         
        {v assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z v}
   *)
    
   (**{v predicate ||a|| : a -> bool v}*)
   (**  {v assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x v}
   *)
    
   type b
    
   (**{v predicate (=b=) : b -> b -> bool v}*)
   (**  {v assertion symmetric_b :  forall x:b, y:b,  x =b= y -> y =b= x v}
         
        {v assertion transitive_b : 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z v}
   *)
    
   (**{v predicate ||b|| : b -> bool v}*)
   (**  {v assertion support_def_b :  forall x:b,  x : ||b|| <-> x =b= x v}
   *)
    
   type d = a * b
    
   (**{v predicate ||d|| : d -> bool v}*)
   (**  {v assertion d_def_support : 
          forall p:d,  p : ||d|| <-> p : ||a * b|| v}
   *)
    
   (**{v predicate (=d=) : d -> d -> bool v}*)
   (**  {v assertion d_def_per : 
          forall p:d, q:d,  p =d= q <-> p =(a * b)= q v}
   *)
 end

