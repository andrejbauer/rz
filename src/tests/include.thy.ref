[Processing include.thy]
module type A = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
end

module type B = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
   
  type b
  (**  Assertion per_b =  PER(=b=)
  *)
end

module type C = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
   
  type b
  (**  Assertion per_b =  PER(=b=)
  *)
   
  type d = b * a
  (**  Assertion d_def_total = 
         all (x:b * a).  x : ||d|| <=> pi0 x : ||b|| and pi1 x : ||a||
        
       Assertion d_def_per = 
         all (y:b * a, z:b * a).  y =d= z <=> pi0 y =b= pi0 y and 
           pi1 y =a= pi1 y
  *)
end

