[Processing include.thy]
module type A = sig
                  type a
                  (**  Assertion per_a =  PER(=a=)
                  *)
                end
 
module type B =
 sig
   type a
   (**  Assertion per_a =  PER(=a=)
   *)
    
   type b
   (**  Assertion per_b =  PER(=b=)
   *)
 end
 
module type C =
 sig
   type a
   (**  Assertion per_a =  PER(=a=)
   *)
    
   type b
   (**  Assertion per_b =  PER(=b=)
   *)
    
   type d = a * b
   (**  Assertion d_def_total = 
          forall p:a * b,  p : ||d|| <-> pi0 p : ||a|| /\ pi1 p : ||b||
         
        Assertion d_def_per = 
          forall p:a * b, q:a * b,  p =d= q <-> pi0 p =a= pi0 q /\ 
            pi1 p =b= pi1 q
   *)
 end

