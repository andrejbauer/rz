[Processing ./include.thy]
module type A =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x 
         
         assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z 
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x 
   *)
 end
 
module type B =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x 
         
         assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z 
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x 
   *)
    
   type b
    
   (** predicate (=b=) : b -> b -> bool *)
   (**   assertion symmetric_b :  forall x:b, y:b,  x =b= y -> y =b= x 
         
         assertion transitive_b : 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z 
   *)
    
   (** predicate ||b|| : b -> bool *)
   (**   assertion support_def_b :  forall x:b,  x : ||b|| <-> x =b= x 
   *)
 end
 
module type C =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**   assertion symmetric_a :  forall x:a, y:a,  x =a= y -> y =a= x 
         
         assertion transitive_a : 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z 
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**   assertion support_def_a :  forall x:a,  x : ||a|| <-> x =a= x 
   *)
    
   type b
    
   (** predicate (=b=) : b -> b -> bool *)
   (**   assertion symmetric_b :  forall x:b, y:b,  x =b= y -> y =b= x 
         
         assertion transitive_b : 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z 
   *)
    
   (** predicate ||b|| : b -> bool *)
   (**   assertion support_def_b :  forall x:b,  x : ||b|| <-> x =b= x 
   *)
    
   type d = a * b
    
   (** predicate ||d|| : d -> bool *)
   (**   assertion d_def_support :  forall p:d,  p : ||d|| <-> p : ||a * b|| 
   *)
    
   (** predicate (=d=) : d -> d -> bool *)
   (**   assertion d_def_per :  forall p:d, q:d,  p =d= q <-> p =(a * b)= q 
   *)
 end

