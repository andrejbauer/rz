[Processing include.thy]
module type A =
 sig
   type a
   (**  Assertion per_a = 
          (forall x:a, y:a, z:a,  y =a= z /\ x =a= y -> x =a= z)
   *)
 end
 
module type B =
 sig
   type a
   (**  Assertion per_a = 
          (forall x:a, y:a, z:a,  y =a= z /\ x =a= y -> x =a= z)
   *)
    
   type b
   (**  Assertion per_b = 
          (forall x:b, y:b, z:b,  y =b= z /\ x =b= y -> x =b= z)
   *)
 end
 
module type C =
 sig
   type a
   (**  Assertion per_a = 
          (forall x:a, y:a, z:a,  y =a= z /\ x =a= y -> x =a= z)
   *)
    
   type b
   (**  Assertion per_b = 
          (forall x:b, y:b, z:b,  y =b= z /\ x =b= y -> x =b= z)
   *)
    
   type d = b * a
   (**  Assertion d_def_total = 
          forall p:b * a,  p : ||d|| <-> pi1 p : ||b|| /\ pi0 p : ||a||
         
        Assertion d_def_per = 
          forall p:b * a, q:b * a,  p =d= q <-> pi1 p =b= pi1 q /\ 
            pi0 p =a= pi0 q
   *)
 end

