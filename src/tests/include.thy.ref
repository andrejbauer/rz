[Processing ./include.thy]
module type A =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a =  forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**  Assertion total_def_a =  forall x:a,  x : ||a|| <-> x =a= x
   *)
 end
 
module type B =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a =  forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**  Assertion total_def_a =  forall x:a,  x : ||a|| <-> x =a= x
   *)
    
   type b
    
   (** predicate (=b=) : b -> b -> bool *)
   (**  Assertion symmetric_b =  forall x:b, y:b,  x =b= y -> y =b= x
         
        Assertion transitive_b = 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z
   *)
    
   (** predicate ||b|| : b -> bool *)
   (**  Assertion total_def_b =  forall x:b,  x : ||b|| <-> x =b= x
   *)
 end
 
module type C =
 sig
   type a
    
   (** predicate (=a=) : a -> a -> bool *)
   (**  Assertion symmetric_a =  forall x:a, y:a,  x =a= y -> y =a= x
         
        Assertion transitive_a = 
          forall x:a, y:a, z:a,  x =a= y /\ y =a= z -> x =a= z
   *)
    
   (** predicate ||a|| : a -> bool *)
   (**  Assertion total_def_a =  forall x:a,  x : ||a|| <-> x =a= x
   *)
    
   type b
    
   (** predicate (=b=) : b -> b -> bool *)
   (**  Assertion symmetric_b =  forall x:b, y:b,  x =b= y -> y =b= x
         
        Assertion transitive_b = 
          forall x:b, y:b, z:b,  x =b= y /\ y =b= z -> x =b= z
   *)
    
   (** predicate ||b|| : b -> bool *)
   (**  Assertion total_def_b =  forall x:b,  x : ||b|| <-> x =b= x
   *)
    
   type d = a * b
    
   (** predicate ||d|| : d -> bool *)
   (**  Assertion d_def_support =  forall p:d,  p : ||d|| <-> p : ||a * b||
   *)
    
   (** predicate (=d=) : d -> d -> bool *)
   (**  Assertion d_def_per = 
          forall p:d, q:d,  p =d= q <-> pi0 p =a= pi0 q /\ pi1 p =b= pi1 q
   *)
 end

