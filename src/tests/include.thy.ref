[Processing include.thy]
module type A = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
end

module type B = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
   
  type b
  (**  Assertion per_b =  PER(=b=)
  *)
end

module type C = 
sig
  type a
  (**  Assertion per_a =  PER(=a=)
  *)
   
  type b
  (**  Assertion per_b =  PER(=b=)
  *)
   
  type d = b * a
  (**  Assertion d_def_total = 
         all (x:b * a).  ||d|| x <=>
           (Pfun (t : b * a) -> ||b|| pi0 t and ||a|| pi1 t)
        
       Assertion d_def_per = 
         all (y:b * a, z:b * a).  y =d= z <=>
           (Pfun (u : b * a) ->
            Pfun (v : b * a) -> pi0 u =b= pi0 u and pi1 u =a= pi1 u)
  *)
end

