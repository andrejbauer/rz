[Processing ./dependent_product.thy]
module type T =
 sig
   type s
    
   (** predicate (=s=) : s -> s -> bool *)
   (**  assertion symmetric_s :  forall x:s, y:s,  x =s= y -> y =s= x
         
        assertion transitive_s : 
          forall x:s, y:s, z:s,  x =s= y /\ y =s= z -> x =s= z
   *)
    
   (** predicate ||s|| : s -> bool *)
   (**  assertion support_def_s :  forall x:s,  x : ||s|| <-> x =s= x
   *)
    
   type t
    
   (** predicate (=t=) : s -> t -> t -> bool *)
   (**  assertion strict_t :  forall x:s, y:t, z:t,  y =(t x)= z -> x : ||s||
         
        assertion extensional_t : 
          forall x:s, y:s, z:t, w:t,  x =s= y -> z =(t x)= w -> z =(t y)= w
         
        assertion symmetric_t : 
          forall x:s, y:t, z:t,  y =(t x)= z -> z =(t x)= y
         
        assertion transitive_t : 
          forall x:s, y:t, z:t, w:t,  y =(t x)= z /\ z =(t x)= w ->
            y =(t x)= w
   *)
    
   (** predicate ||t|| : s -> t -> bool *)
   (**  assertion support_def_t : 
          forall x:s, y:t,  y : ||t x|| <-> y =(t x)= y
   *)
    
   val a : s * t
   (**  assertion a_support :  pi0 a : ||s|| /\ pi1 a : ||t (pi0 a)||
   *)
    
   val b : s * t
   (**  assertion b_support :  pi0 b : ||s|| /\ pi1 b : ||t (pi0 b)||
   *)
    
   
   (**  assertion eq :  pi0 a =s= pi0 b /\ pi1 a =(t (pi0 a))= pi1 b
   *)
 end

