[Processing dependent_product.thy]
module type T =
 sig
   type s
   (**  Assertion per_s = 
          (forall x:s, y:s, z:s,  y =s= z /\ x =s= y -> x =s= z)
   *)
    
   type t
   (**  Assertion per_t = 
          forall (x:||s||), 
            (forall y:t, z:t, w:t,  z =(t x)= w /\ y =(t x)= z -> y =(t x)= w)
   *)
    
   val a : t * s
   (**  Assertion a_total =  pi1 a : ||t (pi0 a)|| /\ pi0 a : ||s||
   *)
    
   val b : t * s
   (**  Assertion b_total =  pi1 b : ||t (pi0 b)|| /\ pi0 b : ||s||
   *)
    
   
   (**  Assertion eq =  pi1 a =(t (pi0 a))= pi1 b /\ pi0 a =s= pi0 b
   *)
 end

