[Processing ./rename.thy]
module type T =
 sig
   type s
    
   (** predicate (=s=) : s -> s -> bool *)
   (**  assertion symmetric_s :  forall x:s, y:s,  x =s= y -> y =s= x
         
        assertion transitive_s : 
          forall x:s, y:s, z:s,  x =s= y /\ y =s= z -> x =s= z
   *)
    
   (** predicate ||s|| : s -> bool *)
   (**  assertion support_def_s :  forall x:s,  x : ||s|| <-> x =s= x
   *)
 end
 
module type U =
 sig
   type s
    
   (** predicate (=s=) : s -> s -> bool *)
   (**  assertion symmetric_s :  forall x:s, y:s,  x =s= y -> y =s= x
         
        assertion transitive_s : 
          forall x:s, y:s, z:s,  x =s= y /\ y =s= z -> x =s= z
   *)
    
   (** predicate ||s|| : s -> bool *)
   (**  assertion support_def_s :  forall x:s,  x : ||s|| <-> x =s= x
   *)
    
   module X : T
 end
 
module type V = functor (X' : U) ->
                functor (X'' : U) ->
                sig
                  module X : U
                end
 
module type W = functor (X : U) ->
                functor (Y' : U) ->
                sig
                  module Y : T
                end

