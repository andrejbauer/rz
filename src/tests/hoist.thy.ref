[Processing hoist.thy]
module type HoistTerms = 
sig
  type s
  (**  Assertion per_s =  PER(=s=)
  *)
   
  val a : s
  (**  Assertion a_total =  a : ||s||
  *)
   
  val b : s
  (**  Assertion b_total =  b : ||s||
  *)
   
  val c : s
  (**  Assertion c_total =  c : ||s||
  *)
   
  type p
  (**  Assertion predicate_p =  PREDICATE(p, p)
  *)
   
  val f : s -> s
  (**  Assertion f_total =  forall x:s, x':s,  x =s= x' -> f x =s= f x'
  *)
   
  val emptyTuple : unit
  (**  Assertion emptyTuple_def =  emptyTuple = ()
  *)
   
  val var : s
  (**  Assertion var_def =  var =s= a
  *)
   
  val tuple : (s * p) * s * (s * p)
  (**  Assertion tuple_def = 
         let u = assure x:s, z:p.
                     (x : ||s|| and z |= p x and 
                      (forall (x':||s||), 
                         forall z':p,  z' |= p x' -> x =s= x')) in (x,z)
         in let u'' = assure x:s, z:p.
                          (x : ||s|| and z |= p f x and 
                           (forall (x':||s||), 
                              forall z':p,  z' |= p f x' -> x =s= x'))
                        in (x,z)
            in pi1 (pi0 tuple) |= p (pi0 (pi0 tuple)) and 
            pi1 u |= p (pi0 u) and pi0 (pi0 tuple) =s= pi0 u and 
            pi1 tuple =s= b and pi1 (pi2 tuple) |= p f (pi0 (pi2 tuple)) and 
            pi1 u'' |= p f (pi0 u'') and pi0 (pi2 tuple) =s= pi0 u''
  *)
   
  val proj : s
  (**  Assertion proj_def =  proj =s= b
  *)
   
  val g : (s -> s) -> s
  (**  Assertion g_def = 
         forall x:s -> s, x':s -> s, 
           (forall x'':s, x_1:s,  x'' =s= x_1 -> x x'' =s= x' x_1) ->
           g x =s= x'
                     (assure x:s, z:p.
                          (x : ||s|| and z |= p x and 
                           (forall (x'':||s||), 
                              forall z':p,  z' |= p x'' -> x =s= x'')) in x)
  *)
   
  val application : s
  (**  Assertion application_def = 
         application =s= (assure h:(s -> s) -> s.
                              ((forall x:s -> s, x':s -> s, 
                                  (forall x'':s, x_1:s,  x'' =s= x_1 ->
                                     x x'' =s= x' x_1) -> h x =s= h x') and 
                               (forall x:s -> s, x':s -> s, 
                                  (forall x'':s, x_1:s,  x'' =s= x_1 ->
                                     x x'' =s= x' x_1) -> g x =s= h x') and 
                               (forall h':(s -> s) -> s, 
                                  (forall x:s -> s, x':s -> s, 
                                     (forall x'':s, x_1:s,  x'' =s= x_1 ->
                                        x x'' =s= x' x_1) -> h' x =s= 
                                     h' x') ->
                                  (forall x:s -> s, x':s -> s, 
                                     (forall x'':s, x_1:s,  x'' =s= x_1 ->
                                        x x'' =s= x' x_1) -> g x =s= 
                                     h' x') ->
                                  forall x:s -> s, x':s -> s, 
                                    (forall x'':s, x_1:s,  x'' =s= x_1 ->
                                       x x'' =s= x' x_1) -> h x =s= h' x'))
                            in h
                                 (fun x : s =>
                                  assure y:s, z:p.
                                      (y : ||s|| and z |= p y and 
                                       (forall (y':||s||), 
                                          forall z':p,  z' |= p y' ->
                                            y =s= y')) in y))
  *)
   
  val description : s * p
  (**  Assertion description_def = 
         let x' = assure x:s, z:p.
                      (x : ||s|| and 
                       z |= p (assure y:s.
                                   (y : ||s|| and y =s= x and 
                                    (forall (y':||s||),  y' =s= x -> y =s= y'))
                                 in y) and 
                       (forall (x':||s||), 
                          forall z':p, 
                            z' |= p (assure y:s.
                                         (y : ||s|| and y =s= x' and 
                                          (forall (y':||s||),  y' =s= x' ->
                                             y =s= y')) in y) -> x =s= x'))
                    in (x,z)
         in pi1 description |= p (assure y:s.
                                      (y : ||s|| and 
                                       y =s= pi0 description and 
                                       (forall (y':||s||), 
                                          y' =s= pi0 description -> y =s= y'))
                                    in y) and 
         pi1 x' |= p (assure y:s.
                          (y : ||s|| and y =s= pi0 x' and 
                           (forall (y':||s||),  y' =s= pi0 x' -> y =s= y'))
                        in y) and 
         pi0 description =s= pi0 x'
  *)
   
  val cases : s
  (**  Assertion cases_def = 
         let x' = assure ((forall (___3:||s||),  b =s= c))
                    in assure x':s.
                           (x' : ||s|| and x' =s= b and 
                            (forall (x'':||s||),  x'' =s= b -> x' =s= x''))
                         in x'
         in cases =s= b and x' =s= b and cases =s= x'
  *)
   
  val r : s
  (**  Assertion r_total =  r : ||s||
  *)
   
  val rzquot : s
  (**  Assertion rzquot_def = 
         rzquot =s= (assure q:s.
                         (q : ||s|| and q = r and 
                          (forall (q':||s||),  q' = r -> q = q')) in q)
  *)
   
  val rzchoose : s
  (**  Assertion rzchoose_def = 
         rzchoose =s= (let x = assure x:s.
                                   (x : ||s|| and a =s= x and 
                                    (forall (x':||s||),  a =s= x' -> x =s= x'))
                                 in x
                       in assure (forall x':s,  x = x' ->
                                    (assure q:s.
                                         (q : ||s|| and q = x and 
                                          (forall (q':||s||),  q' = x ->
                                             q = q')) in q) =s= (assure q:s.
                                                                    (
                                                                    q : ||s|| and 
                                                                    q = x' and 
                                                                    (
                                                                    forall (q':||s||), 
                                                                    q' = x' ->
                                                                    q = q'))
                                                                   in q))
                            in assure q:s.
                                   (q : ||s|| and q = x and 
                                    (forall (q':||s||),  q' = x -> q = q'))
                                 in q)
  *)
   
  
  (**  Assertion predicate_eq =  PREDICATE(eq)
  *)
   
  val quot : s
  (**  Assertion quot_def = 
         eq quot (assure x:s.
                      (x : ||s|| and x =s= a and 
                       (forall (x':||s||),  x' =s= a -> x =s= x')) in x)
  *)
   
  val choose_term : s
  (**  Assertion choose_term_def = 
         eq choose_term (let x = assure w:s.
                                     (w : ||s|| and eq w quot and 
                                      (forall (w':||s||),  eq w' quot ->
                                         eq w w')) in w
                         in assure (forall x':s,  eq x x' ->
                                      eq (assure y':s.
                                              (y' : ||s|| and x =s= y' and 
                                               (forall (y'':||s||), 
                                                  x =s= y'' -> y' =s= y''))
                                            in y') (assure y:s.
                                                        (y : ||s|| and 
                                                         x' =s= y and 
                                                         (forall (y':||s||), 
                                                            x' =s= y' ->
                                                            y =s= y')) in y))
                              in assure y:s.
                                     (y : ||s|| and x =s= y and 
                                      (forall (y':||s||),  x =s= y' ->
                                         y =s= y')) in y)
  *)
   
  val let_term : s * s
  (**  Assertion let_term_def = 
         let x = assure x:s.
                     (x : ||s|| and x =s= a and 
                      (forall (x':||s||),  x' =s= a -> x =s= x')) in x
         in pi0 let_term =s= x and 
         pi1 let_term =s= (assure y:s.
                               (y : ||s|| and x =s= y and 
                                (forall (y':||s||),  x =s= y' -> y =s= y'))
                             in y)
  *)
   
  val subin : s * p
  (**  Assertion subin_def = 
         let x' = assure x:p. (x |= p a) in (a,x)
         in pi1 subin |= p (pi0 subin) and pi1 x' |= p (pi0 x') and 
         pi0 subin =s= pi0 x'
  *)
   
  (** fishy *)
   
  val d : s * p
  (**  Assertion d_total =  pi0 d : ||s|| and pi1 d |= p (pi0 d)
  *)
   
  val subout : s
  (**  Assertion subout_def =  subout =s= pi0 d
  *)
end


-------------------------------
WARNING:
Shadowing of x detected.
-------------------------------


-------------------------------
WARNING:
Shadowing of f detected.
-------------------------------

