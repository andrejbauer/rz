[Processing ./hoist.thy]
module type HoistTerms =
 sig
   type s
    
   (** predicate (=s=) : s -> s -> bool *)
   (**   assertion symmetric_s :  forall x:s, y:s,  x =s= y -> y =s= x 
         
         assertion transitive_s : 
          forall x:s, y:s, z:s,  x =s= y /\ y =s= z -> x =s= z 
   *)
    
   (** predicate ||s|| : s -> bool *)
   (**   assertion support_def_s :  forall x:s,  x : ||s|| <-> x =s= x 
   *)
    
   val a : s
   (**   assertion a_support :  a : ||s|| 
   *)
    
   val b : s
   (**   assertion b_support :  b : ||s|| 
   *)
    
   val c : s
   (**   assertion c_support :  c : ||s|| 
   *)
    
   type ty_p
    
   (** predicate p : s -> ty_p -> bool *)
   (**   assertion strict_p :  forall x:s, d:ty_p,  p x d -> x : ||s|| 
         
         assertion extensional_p : 
          forall x:s, y:s, d:ty_p,  x =s= y -> p x d -> p y d 
   *)
    
   val f : s -> s
   (**   assertion f_support :  f : ||s -> s|| 
   *)
    
   val emptyTuple : unit
    
   val var : s
   (**   assertion var_def :  var =s= a 
   *)
    
   val tuple : (s * ty_p) * s * (s * ty_p)
   (**   assertion tuple_def : 
          let q = assure x:s, d:ty_p,
                      (x : ||s|| /\ p x d /\ 
                       (forall (x':||s||), 
                          forall a':ty_p,  p x' a' -> x =s= x')) in (x,d)
          in let t = assure x:s, d:ty_p,
                         (x : ||s|| /\ p (f x) d /\ 
                          (forall (x':||s||), 
                             forall a':ty_p,  p (f x') a' -> x =s= x'))
                       in (x,d)
             in p (pi0 (pi0 tuple)) (pi1 (pi0 tuple)) /\ 
             p (pi0 q) (pi1 q) /\ pi0 (pi0 tuple) =s= pi0 q /\ 
             pi1 tuple =s= b /\ p (f (pi0 (pi2 tuple))) (pi1 (pi2 tuple)) /\ 
             p (f (pi0 t)) (pi1 t) /\ pi0 (pi2 tuple) =s= pi0 t 
   *)
    
   val proj : s
   (**   assertion proj_def :  proj =s= b 
   *)
    
   val g : (s -> s) -> s
   (**   assertion g_def : 
          g =((s -> s) -> s)= (fun f' : s -> s =>
                               f'
                                 (assure x:s, d:ty_p,
                                      (x : ||s|| /\ p x d /\ 
                                       (forall (x':||s||), 
                                          forall a':ty_p,  p x' a' ->
                                            x =s= x')) in x)) 
   *)
    
   val application : s
   (**   assertion application_def : 
          application =s= (assure h:(s -> s) -> s,
                               (h : ||(s -> s) -> s|| /\ 
                                g =((s -> s) -> s)= h /\ 
                                (forall (h':||(s -> s) -> s||), 
                                   g =((s -> s) -> s)= h' ->
                                   h =((s -> s) -> s)= h'))
                             in h
                                  (fun x : s =>
                                   assure y:s, d:ty_p,
                                       (y : ||s|| /\ p y d /\ 
                                        (forall (y':||s||), 
                                           forall a':ty_p,  p y' a' ->
                                             y =s= y')) in y)) 
   *)
    
   val description : s * ty_p
   (**   assertion description_def : 
          let x = assure x:s, d:ty_p,
                      (x : ||s|| /\ 
                       p (assure y:s,
                              (y : ||s|| /\ y =s= x /\ 
                               (forall (y':||s||),  y' =s= x -> y =s= y'))
                            in y) d /\ 
                       (forall (x':||s||), 
                          forall a':ty_p, 
                            p (assure y:s,
                                   (y : ||s|| /\ y =s= x' /\ 
                                    (forall (y':||s||),  y' =s= x' ->
                                       y =s= y')) in y) a' -> x =s= x'))
                    in (x,d)
          in p (assure y:s,
                    (y : ||s|| /\ y =s= pi0 description /\ 
                     (forall (y':||s||),  y' =s= pi0 description -> y =s= y'))
                  in y) (pi1 description) /\ 
          p (assure y:s,
                 (y : ||s|| /\ y =s= pi0 x /\ 
                  (forall (y':||s||),  y' =s= pi0 x -> y =s= y')) in y) 
          (pi1 x) /\ pi0 description =s= pi0 x 
   *)
    
   val cases : s
   (**   assertion cases_def :  cases =s= b /\ 
          cases =s= (assure x:s,
                         (x : ||s|| /\ x =s= b /\ 
                          (forall (x':||s||),  x' =s= b -> x =s= x')) in x) 
   *)
    
   val r : s
   (**   assertion r_support :  r : ||s|| 
   *)
    
   val rzquot : s
   (**   assertion rzquot_def :  rzquot =s= r 
   *)
    
   val rzchoose : s
   (**   assertion rzchoose_def : 
          rzchoose =s= (assure x:s,
                            (x : ||s|| /\ a =s= x /\ 
                             (forall (x':||s||),  a =s= x' -> x =s= x')) in x) 
   *)
    
   (** predicate eq : s -> s -> bool *)
   (**   assertion strict_eq : 
          forall x:s, y:s,  eq x y -> x : ||s|| /\ y : ||s|| 
         
         assertion extensional_eq : 
          forall x:s, y:s, z:s, w:s,  x =s= z /\ y =s= w -> eq x y -> eq z w 
   *)
    
   
   (**   assertion equiv_eq :  (forall (x:||s||),  eq x x) /\ 
          (forall (x:||s||, y:||s||),  eq x y -> eq y x) /\ 
          (forall (x:||s||, y:||s||, z:||s||),  eq x y /\ eq y z -> eq x z) 
   *)
    
   val quot : s
   (**   assertion quot_def : 
          eq quot (assure x:s,
                       (x : ||s|| /\ x =s= a /\ 
                        (forall (x':||s||),  x' =s= a -> x =s= x')) in x) 
   *)
    
   val choose_term : s
   (**   assertion choose_term_def : 
          eq choose_term (let x = assure w:s,
                                      (w : ||s|| /\ eq w quot /\ 
                                       (forall (w':||s||),  eq w' quot ->
                                          eq w w')) in w
                          in assure (forall x':s,  eq x x' ->
                                       eq (assure y:s,
                                               (y : ||s|| /\ x =s= y /\ 
                                                (forall (y':||s||), 
                                                   x =s= y' -> y =s= y'))
                                             in y) (assure y:s,
                                                        (y : ||s|| /\ 
                                                         x' =s= y /\ 
                                                         (forall (y':||s||), 
                                                            x' =s= y' ->
                                                            y =s= y')) in y))
                               in assure y:s,
                                      (y : ||s|| /\ x =s= y /\ 
                                       (forall (y':||s||),  x =s= y' ->
                                          y =s= y')) in y) 
   *)
    
   val let_term : s * s
   (**   assertion let_term_def : 
          let_term =(s * s)= (let x = assure x:s,
                                          (x : ||s|| /\ x =s= a /\ 
                                           (forall (x':||s||),  x' =s= a ->
                                              x =s= x')) in x
                              in (x,
                                 (assure y:s,
                                      (y : ||s|| /\ x =s= y /\ 
                                       (forall (y':||s||),  x =s= y' ->
                                          y =s= y')) in y))) 
   *)
    
   val subin : s * ty_p
   (**   assertion subin_def :  p (pi0 subin) (pi1 subin) /\ 
          p a (assure d:ty_p, (p a d) in d) /\ pi0 subin =s= a 
   *)
    
   (* fishy *)
    
   val d : s * ty_p
   (**   assertion d_support :  pi0 d : ||s|| /\ p (pi0 d) (pi1 d) 
   *)
    
   val subout : s
   (**   assertion subout_def :  subout =s= pi0 d 
   *)
 end

