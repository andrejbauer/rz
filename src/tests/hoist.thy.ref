[Processing ./hoist.thy]
module type HoistTerms =
 sig
   type s
   (**  Assertion per_s [Definitional] = 
          (forall x:s, y:s,  x =s= y -> y =s= x) /\ 
          (forall x:s, y:s, z:s,  x =s= y /\ y =s= z -> x =s= z)
   *)
    
   val a : s
   (**  Assertion a_total =  a : ||s||
   *)
    
   val b : s
   (**  Assertion b_total =  b : ||s||
   *)
    
   val c : s
   (**  Assertion c_total =  c : ||s||
   *)
    
   type p
    
   (* proposition p : s->p->prop *)
   (**  Assertion predicate_p = 
          (forall x:s, d:p,  d |= p x -> x : ||s||) /\ 
          (forall (x:||s||, y:||s||), 
             forall d:p,  x =s= y -> d |= p x -> d |= p y)
   *)
    
   val f : s -> s
   (**  Assertion f_total =  forall x:s, y:s,  x =s= y -> f x =s= f y
   *)
    
   val emptyTuple : unit
   (**  Assertion emptyTuple_def =  true
   *)
    
   val var : s
   (**  Assertion var_def =  var =s= a
   *)
    
   val tuple : (s * p) * s * (s * p)
   (**  Assertion tuple_def = 
          let q = assure x:s, d:p.
                      (x : ||s|| /\ d |= p x /\ 
                       (forall (x':||s||), 
                          forall a':p,  a' |= p x' -> x =s= x')) in (x,d)
          in let t = assure x:s, d:p.
                         (x : ||s|| /\ d |= p (f x) /\ 
                          (forall (x':||s||), 
                             forall a':p,  a' |= p (f x') -> x =s= x'))
                       in (x,d)
             in pi1 (pi0 tuple) |= p (pi0 (pi0 tuple)) /\ 
             pi1 q |= p (pi0 q) /\ pi0 (pi0 tuple) =s= pi0 q /\ 
             pi1 tuple =s= b /\ 
             pi1 (pi2 tuple) |= p (f (pi0 (pi2 tuple))) /\ 
             pi1 t |= p (f (pi0 t)) /\ pi0 (pi2 tuple) =s= pi0 t
   *)
    
   val proj : s
   (**  Assertion proj_def =  proj =s= b
   *)
    
   val g : (s -> s) -> s
   (**  Assertion g_def = 
          forall h:s -> s, r:s -> s, 
            (forall x:s, y:s,  x =s= y -> h x =s= r y) ->
            g h =s= r
                      (assure x:s, d:p.
                           (x : ||s|| /\ d |= p x /\ 
                            (forall (x':||s||), 
                               forall a':p,  a' |= p x' -> x =s= x')) in x)
   *)
    
   val application : s
   (**  Assertion application_def = 
          application =s= (assure h:(s -> s) -> s.
                               ((forall r:s -> s, f':s -> s, 
                                   (forall x:s, y:s,  x =s= y -> r x =s= f' y) ->
                                   h r =s= h f') /\ 
                                (forall r:s -> s, f':s -> s, 
                                   (forall x:s, y:s,  x =s= y -> r x =s= f' y) ->
                                   g r =s= h f') /\ 
                                (forall h':(s -> s) -> s, 
                                   (forall r:s -> s, f':s -> s, 
                                      (forall x:s, y:s,  x =s= y ->
                                         r x =s= f' y) -> h' r =s= h' f') ->
                                   (forall r:s -> s, f':s -> s, 
                                      (forall x:s, y:s,  x =s= y ->
                                         r x =s= f' y) -> g r =s= h' f') ->
                                   forall r:s -> s, f':s -> s, 
                                     (forall x:s, y:s,  x =s= y ->
                                        r x =s= f' y) -> h r =s= h' f'))
                             in h
                                  (fun x : s =>
                                   assure y:s, d:p.
                                       (y : ||s|| /\ d |= p y /\ 
                                        (forall (y':||s||), 
                                           forall a':p,  a' |= p y' ->
                                             y =s= y')) in y))
   *)
    
   val description : s * p
   (**  Assertion description_def = 
          let x = assure x:s, d:p.
                      (x : ||s|| /\ 
                       d |= p (assure y:s.
                                   (y : ||s|| /\ y =s= x /\ 
                                    (forall (y':||s||),  y' =s= x -> y =s= y'))
                                 in y) /\ 
                       (forall (x':||s||), 
                          forall a':p, 
                            a' |= p (assure y:s.
                                         (y : ||s|| /\ y =s= x' /\ 
                                          (forall (y':||s||),  y' =s= x' ->
                                             y =s= y')) in y) -> x =s= x'))
                    in (x,d)
          in pi1 description |= p (assure y:s.
                                       (y : ||s|| /\ 
                                        y =s= pi0 description /\ 
                                        (forall (y':||s||), 
                                           y' =s= pi0 description -> y =s= y'))
                                     in y) /\ 
          pi1 x |= p (assure y:s.
                          (y : ||s|| /\ y =s= pi0 x /\ 
                           (forall (y':||s||),  y' =s= pi0 x -> y =s= y'))
                        in y) /\ 
          pi0 description =s= pi0 x
   *)
    
   val cases : s
   (**  Assertion cases_def = 
          let x = assure ((forall (Z__1:||s||),  b =s= c))
                    in assure x:s.
                           (x : ||s|| /\ x =s= b /\ 
                            (forall (x':||s||),  x' =s= b -> x =s= x')) in x
          in cases =s= b /\ x =s= b /\ cases =s= x
   *)
    
   val r : s
   (**  Assertion r_total =  r : ||s||
   *)
    
   val rzquot : s
   (**  Assertion rzquot_def =  rzquot =s= r
   *)
    
   val rzchoose : s
   (**  Assertion rzchoose_def = 
          rzchoose =s= (assure x:s.
                            (x : ||s|| /\ a =s= x /\ 
                             (forall (x':||s||),  a =s= x' -> x =s= x')) in x)
   *)
    
   (* proposition eq : s->s->prop *)
   (**  Assertion predicate_eq = 
          (forall x:s, y:s,  eq x y -> x : ||s|| /\ y : ||s||) /\ 
          (forall (x:||s||, y:||s||, z:||s||, w:||s||),  x =s= z /\ 
             y =s= w -> eq x y -> eq z w)
   *)
    
   
   (**  Assertion equiv_eq =  (forall (x:||s||),  eq x x) /\ 
          (forall (x:||s||, y:||s||),  eq x y -> eq y x) /\ 
          (forall (x:||s||, y:||s||, z:||s||),  eq x y /\ eq y z -> eq x z)
   *)
    
   val quot : s
   (**  Assertion quot_def = 
          eq quot (assure x:s.
                       (x : ||s|| /\ x =s= a /\ 
                        (forall (x':||s||),  x' =s= a -> x =s= x')) in x)
   *)
    
   val choose_term : s
   (**  Assertion choose_term_def = 
          let x = assure w:s.
                      (w : ||s|| /\ eq w quot /\ 
                       (forall (w':||s||),  eq w' quot -> eq w w')) in w
          in eq choose_term (assure (forall x':s,  eq x x' ->
                                       eq (assure y:s.
                                               (y : ||s|| /\ x =s= y /\ 
                                                (forall (y':||s||), 
                                                   x =s= y' -> y =s= y'))
                                             in y) (assure y:s.
                                                        (y : ||s|| /\ 
                                                         x' =s= y /\ 
                                                         (forall (y':||s||), 
                                                            x' =s= y' ->
                                                            y =s= y')) in y))
                               in assure y:s.
                                      (y : ||s|| /\ x =s= y /\ 
                                       (forall (y':||s||),  x =s= y' ->
                                          y =s= y')) in y)
   *)
    
   val let_term : s * s
   (**  Assertion let_term_def = 
          let x = assure x:s.
                      (x : ||s|| /\ x =s= a /\ 
                       (forall (x':||s||),  x' =s= a -> x =s= x')) in x
          in pi0 let_term =s= x /\ 
          pi1 let_term =s= (assure y:s.
                                (y : ||s|| /\ x =s= y /\ 
                                 (forall (y':||s||),  x =s= y' -> y =s= y'))
                              in y)
   *)
    
   val subin : s * p
   (**  Assertion subin_def =  pi1 subin |= p (pi0 subin) /\ 
          (assure d:p. (d |= p a) in d) |= p a /\ pi0 subin =s= a
   *)
    
   (** fishy *)
    
   val d : s * p
   (**  Assertion d_total =  pi0 d : ||s|| /\ pi1 d |= p (pi0 d)
   *)
    
   val subout : s
   (**  Assertion subout_def =  subout =s= pi0 d
   *)
 end

